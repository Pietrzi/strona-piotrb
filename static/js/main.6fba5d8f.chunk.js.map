{"version":3,"sources":["assets/Surfer1.mp4","components/Main.js","components/Hamburger.js","components/Navbar.js","components/Footer.js","components/Movie.js","components/MovieArt.js","components/Paint.js","components/BioContact.js","components/Backdrop.js","components/SideMenu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","src","sample","autoPlay","loop","Hamburger","props","className","onClick","click","Navbar","to","menuHandler","Footer","Movie","MovieArt","Paint","BioContact","Backdrop","SideMenu","sideMenuClasses","show","App","state","sideMenu","sideMenuClickHandler","setState","prevState","backdropClickHandler","backdrop","this","exact","path","component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,qC,oNCS5BC,EANF,WACT,OACI,2BAAOC,IAAKC,IAAQC,UAAU,EAAMC,MAAM,KCSnCC,EAZG,SAAAC,GACd,OACI,yBAAKC,UAAU,qBACX,4BAAQA,UAAU,iBAAiBC,QAASF,EAAMG,OAC9C,yBAAKF,UAAU,yBACf,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,4BCsBhBG,EA1BA,SAACJ,GACZ,OACI,6BACI,yBAAKC,UAAU,wBACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CAASI,GAAG,IAAIJ,UAAU,cAA1B,iBAEJ,yBAAKA,UAAU,sBACX,4BACI,4BACI,kBAAC,IAAD,CAASA,UAAU,sBAAsBI,GAAG,UAA5C,SAEJ,4BACI,kBAAC,IAAD,CAASJ,UAAU,sBAAsBI,GAAG,YAA5C,gBAEJ,4BACI,kBAAC,IAAD,CAASJ,UAAU,sBAAsBI,GAAG,SAA5C,WAGR,kBAAC,EAAD,CAAWF,MAAOH,EAAMM,kBCJ7BC,EAhBA,WACX,OACI,gCACI,yBAAKN,UAAU,wBACX,yBAAKA,UAAU,oBACX,gCACA,iCAEJ,yBAAKA,UAAU,kBACX,kBAAC,IAAD,CAASI,GAAG,cAAcJ,UAAU,aAApC,qBCDLO,EARD,WACV,OACI,yBAAKP,UAAU,aACX,uCCIGQ,EARE,WACb,OACI,yBAAKR,UAAU,aACX,2CCKGS,EARD,WACV,OACI,yBAAKT,UAAU,aACX,uCCMGU,EARI,WACf,OACI,yBAAKV,UAAU,aACX,4CCFGW,EAFE,SAAAZ,GAAK,OAAI,yBAAKC,UAAU,WAAWC,QAASF,EAAMG,SCyBpDU,EAxBE,SAAAb,GAEb,IAAIc,EAAkB,aAKtB,OAJId,EAAMe,OACND,EAAkB,mBAIlB,yBAAKb,UAAWa,GACZ,4BACI,4BACI,kBAAC,IAAD,CAASb,UAAU,sBAAsBI,GAAG,UAA5C,SAEJ,4BACI,kBAAC,IAAD,CAASJ,UAAU,sBAAsBI,GAAG,YAA5C,gBAEJ,4BACI,kBAAC,IAAD,CAASJ,UAAU,sBAAsBI,GAAG,SAA5C,aC0CLW,E,2MA1CbC,MAAQ,CACNC,UAAU,G,EAGZC,qBAAuB,WACrB,EAAKC,UAAS,SAAAC,GACZ,MAAO,CAAEH,UAAWG,EAAUH,c,EAIlCI,qBAAuB,WACrB,EAAKF,SAAS,CACZF,UAAU,K,wEAKZ,IAAIK,EAIJ,OAHIC,KAAKP,MAAMC,WACbK,EAAW,kBAAC,EAAD,CAAUpB,MAAOqB,KAAKF,wBAGjC,oCACCC,EACD,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQjB,YAAakB,KAAKL,uBAC1B,kBAAC,EAAD,CAAUJ,KAAMS,KAAKP,MAAMC,WAC3B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjC,kBAAC,IAAD,CAAOgC,KAAK,SAASC,UAAWnB,IAChC,kBAAC,IAAD,CAAOkB,KAAK,YAAYC,UAAWlB,IACnC,kBAAC,IAAD,CAAOiB,KAAK,SAASC,UAAWjB,IAChC,kBAAC,IAAD,CAAOgB,KAAK,cAAcC,UAAWhB,KAEvC,kBAAC,EAAD,Y,GAnCUiB,IAAMC,WCPJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6fba5d8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Surfer1.a2fd34b6.mp4\";","import React from 'react';\nimport sample from '../assets/Surfer1.mp4';\n\nconst Main = () => {\n    return (\n        <video src={sample} autoPlay={true} loop={true}></video>\n    )\n}\n\nexport default Main;","import React from 'react';\n\nconst Hamburger = props => {\n    return (\n        <div className=\"button__container\">\n            <button className=\"toggle__button\" onClick={props.click}>\n                <div className=\"toggle__button__line\" />\n                <div className=\"toggle__button__line\" />\n                <div className=\"toggle__button__line\" />\n            </button>\n        </div>\n    )\n}\n\nexport default Hamburger;","import React from 'react';\nimport Hamburger from './Hamburger';\nimport { NavLink } from 'react-router-dom';\n\nconst Navbar = (props) => {\n    return (\n        <nav>\n            <div className=\"centering__container\">\n                <div className=\"name__container\">\n                    <NavLink to='/' className=\"logo__name\">piotr bartos</NavLink>\n                </div>\n                <div className=\"navmenu__container\">\n                    <ul>\n                        <li>\n                            <NavLink className=\"menu__link__element\" to='/movie'>film</NavLink>\n                        </li>\n                        <li>\n                            <NavLink className=\"menu__link__element\" to='movieart'>video - art</NavLink>\n                        </li>\n                        <li>\n                            <NavLink className=\"menu__link__element\" to='paint'>paint</NavLink>\n                        </li>\n                    </ul>\n                    <Hamburger click={props.menuHandler}/>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <div className=\"centering__container\">\n                <div className=\"icons__container\">\n                    <p>V</p>\n                    <p>F</p>\n                </div>\n                <div className=\"bio__container\">\n                    <NavLink to=\"/biocontact\" className=\"bio__text\">bio & kontakt</NavLink>\n                </div>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\n\n\nconst Movie = () => {\n    return (\n        <div className=\"temp__box\">\n            <h1>Movie</h1>\n        </div>\n    )\n}\n\nexport default Movie;","import React from 'react';\n\nconst MovieArt = () => {\n    return (\n        <div className=\"temp__box\">\n            <h1>Movie Art</h1>\n        </div>\n    )\n}\n\nexport default MovieArt;","import React from 'react';\n\nconst Paint = () => {\n    return (\n        <div className=\"temp__box\">\n            <h1>Paint</h1>\n        </div>\n    )\n}\n\nexport default Paint;","import React from 'react';\n\n\nconst BioContact = () => {\n    return (\n        <div className=\"temp__box\">\n            <h1>BioContact</h1>\n        </div>\n    )\n}\n\nexport default BioContact;","import React from 'react';\n\nconst Backdrop = props => <div className=\"backdrop\" onClick={props.click}></div>\n\nexport default Backdrop;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst SideMenu = props => {\n\n    let sideMenuClasses = 'side__menu'\n    if (props.show) {\n        sideMenuClasses = 'side__menu open'\n    }\n\n    return (\n        <div className={sideMenuClasses}>\n            <ul>\n                <li>\n                    <NavLink className=\"menu__link__element\" to='/movie'>film</NavLink>\n                </li>\n                <li>\n                    <NavLink className=\"menu__link__element\" to='movieart'>video - art</NavLink>\n                </li>\n                <li>\n                    <NavLink className=\"menu__link__element\" to='paint'>paint</NavLink>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default SideMenu;","import React from 'react';\nimport './scss/style.scss';\nimport {\n  HashRouter,\n  Route,\n  Switch\n} from 'react-router-dom';\nimport Main from './components/Main';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport Movie from './components/Movie';\nimport MovieArt from './components/MovieArt';\nimport Paint from './components/Paint';\nimport BioContact from './components/BioContact';\nimport Backdrop from './components/Backdrop';\nimport SideMenu from './components/SideMenu';\n\n\n\nclass App extends React.Component {\n  state = {\n    sideMenu: false\n  }\n\n  sideMenuClickHandler = () => {\n    this.setState(prevState => {\n      return { sideMenu: !prevState.sideMenu }\n    })\n  }\n\n  backdropClickHandler = () => {\n    this.setState({\n      sideMenu: false\n    })\n  }\n\n  render() {\n    let backdrop;\n    if (this.state.sideMenu) {\n      backdrop = <Backdrop click={this.backdropClickHandler}/>\n    }\n    return (\n      <>\n      {backdrop}\n      <HashRouter>\n        <Navbar menuHandler={this.sideMenuClickHandler}/>\n        <SideMenu show={this.state.sideMenu}/>\n        <Switch>\n          <Route exact path='/' component={Main} />\n          <Route path='/movie' component={Movie} />\n          <Route path='/movieart' component={MovieArt} />\n          <Route path='/paint' component={Paint} />\n          <Route path='/biocontact' component={BioContact} />\n        </Switch>\n        <Footer />\n      </HashRouter>\n      </>\n  );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}